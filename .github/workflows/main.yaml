name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Download jextract
        run: |
          curl -L -o jextract.zip https://download.java.net/java/early_access/jextract/22/6/openjdk-22-jextract+6-47_linux-x64_bin.tar.gz
          du -h jextract.zip
          unzip jextract.zip -d ${{ github.workspace }}
      - name: jextract test
        run: jextract --version
#  build-webp-lib:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [macos-latest, macos-13]
#        include:
#          - os: ubuntu-latest
#            platform: unix
#            arch: amd64
#            install_tools_command: sudo apt-get update && sudo apt-get install gcc make autoconf automake libtool
#          - os: macos-13
#            platform: mac
#            arch: x86_64
#            install_tools_command: brew install make autoconf automake libtool
#          - os: macos-latest
#            platform: mac
#            arch: aarch64
#            install_tools_command: brew install make autoconf automake libtool
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: recursive
#      - name: Install OS specific tools
#        run: ${{ matrix.install_tools_command }}
#      - name: Build WebP lib
#        working-directory: ./submodules/libwebp
#        run: |
#          ./autogen.sh
#          ./configure \
#          --disable-static \
#          --disable-png \
#          --disable-jpeg \
#          --disable-tiff \
#          --disable-gif \
#          --disable-wic \
#          --disable-libwebpdecoder \
#          --disable-libwebpextras \
#          --disable-libwebpmux \
#          --disable-libwebpdemux \
#          --disable-sdl \
#          --prefix=${{ github.workspace }}/webp_compiled
#          make
#          make install
#      - uses: actions/upload-artifact@v4
#        name: Upload WebP libs
#        with:
#          name: webp-imageio_${{ matrix.platform }}_${{ matrix.arch }}
#          path: ${{ github.workspace }}/webp_compiled/lib
#  package-jar:
#    runs-on: ubuntu-latest
#    needs: build-webp-lib
#    environment: release
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/download-artifact@v4
#        name: Download WebP libs - unix_amd64
#        with:
#          name: webp-imageio_unix_amd64
#          path: ${{ github.workspace }}/webp_lib/unix_amd64
#      - uses: actions/download-artifact@v4
#        name: Download WebP libs - mac_x86_64
#        with:
#          name: webp-imageio_mac_x86_64
#          path: ${{ github.workspace }}/webp_lib/mac_x86_64
#      - uses: actions/download-artifact@v4
#        name: Download WebP libs - mac_aarch64
#        with:
#          name: webp-imageio_mac_aarch64
#          path: ${{ github.workspace }}/webp_lib/mac_aarch64
#      - name: Debug lib folder
#        run: |
#          ls -la ${{ github.workspace }}/webp_lib/
#          ls -la ${{ github.workspace }}/webp_lib/unix_amd64
#          ls -la ${{ github.workspace }}/webp_lib/mac_x86_64
#          ls -la ${{ github.workspace }}/webp_lib/mac_aarch64
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '23'
#          server-id: ossrh
#          server-username: MAVEN_USERNAME
#          server-password: MAVEN_PASSWORD
#          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
#          gpg-passphrase: MAVEN_GPG_PASSPHRASE
#      - name: Publish to GitHub Packages
#        run: mvn --batch-mode --no-transfer-progress clean deploy -DskipTests
#        env:
#          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_SIGNING_KEY_PASSWORD }}
